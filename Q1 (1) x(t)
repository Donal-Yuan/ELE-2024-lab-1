import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# question require
# the range of t is [0, 2]
# u(t) = 2 degree
# x(0) = 0
# y(0) = 0.3m
# θ(0) = 5 degree
# x' = v * cos(θ)
# y' = v * sin(θ)
# θ' = v * tan(u) / L
# z' = f(z, u)
# v = 5 m/s
# L = 2.3m

# state z = [x, y, θ]
# Input : u

# Define the system dynamics as a function of the form f(t, z)

v = 5.  # 5 m/s
L = 2.3  # 2.3m
u = 2. * np.pi / 180.  # 2 degrees (in rad)

def dynamics(t, z):
    x = z[0]
    y = z[1]
    theta = z[2]
    return[v * np.cos(theta),
           v * np.sin(theta),
           theta * np.tan(u) / L]

t_final = 2
# θ(0) = 5 degree = 5. * np.pi / 180. = 0.087
z_initial = [0, 0.3, 0.087]
num_points = 100

solution = solve_ivp(dynamics,
                     [0, t_final],
                     z_initial,
                     t_eval=np.linspace(0, t_final, num_points))

times = solution.t
x_trajectory = solution.y[0]
y_trajectory = solution.y[1]
theta_trajectory = solution.y[2]

plt.plot(times, x_trajectory)
plt.ylabel('x (m)')
plt.xlabel('Times (s)')
plt.grid()
plt.show()
