import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

class Car:

    def __init__(self,
                 length=2.3,
                 velocity=5,
                 x=0,
                 y=0,
                 pose=0):
        self.__length = length
        self.__velocity = velocity
        self.__x = x
        self.__y = y
        self.__pose = pose      # theta = pose
        self.__previous_error = None
        self.__sum_errors = 0

    def move(self,
             steering_angle,
             dt):
    # dt is period of time for which we apply this steering angle

        def vehicle_model(t, z):
            x = z[0]
            y = z[1]
            theta = z[2]
            return [self.__velocity * np.cos(theta),
                    self.__velocity * np.sin(theta),
                    self.__velocity * np.tan(steering_angle) / self.__length]

        z_initial = [self.__x, self.__y, self.__pose]

        solution = solve_ivp(vehicle_model,
                             [0, dt],
                             z_initial)
        self.__x = solution.y[0][-1]     # the first and the last result of x
        self.__y = solution.y[1][-1]     # the first and the last result of y
        self.__pose = solution.y[2][-1]     # the first and the last result of pose

    def x(self):
        return self.__x

    def y(self):
        return self.__y

    def pose(self):
        return self.__pose

    def length(self):
        return self.__length

    def pose(self):
        return self.__velocity

class PIDControler:

    def __init__(self, kp, ki, kd, ts):
        """
        Constructor for PIDController
        :param kp: proportional gain
        :param ki: derivative gain
        :param kd: integral gain
        :param ts: sampling time
        """

        self.__kp = kp
        self.__kd = kd / ts
        self.__ki = ki * ts
        self.__ts = ts
        self.__previous_error = None
        self.__sum_errors = 0

    def control(self, y, y_set_point=0):
        error = y_set_point - y
        control_action = self.__kp * error

        if self.__previous_error is not None:
            control_action += self.__kd * (error - self.__previous_error)

        control_action += self.__ki * self.__sum_errors
        self.__sum_errors += error
        self.__previous_error = error
        return control_action

# the sampling rate is 40HZ
# the range of time is [0, 50]
# T = 1 / f = 0.025
# 50 / 0.025 = 2000

t_sampling = 0.025
num_points = 1999
pid = PIDControler(kp=1., ki=0.1, kd=0.4, ts=t_sampling)
Donal = Car(x=0, y=1., pose=0)
u_additive_disturbance = 1 * np.pi / 180.
y_cache = np.array([Donal.y()])

for k in range(num_points):
    u = pid.control(Donal.y())
    Donal.move(u + u_additive_disturbance, t_sampling)
    y_cache = np.append(y_cache, Donal.y())

t_span = t_sampling * np.arange(num_points + 1)
plt.plot(t_span, y_cache)
plt.xlabel('Time (s)')
plt.ylabel('Lateral position, y (m)')
plt.grid()
plt.show()
